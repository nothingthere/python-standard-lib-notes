#+TITLE: 内置类型

* 真假判断
  除下面情况外都为True：
  - None
  - False
  - 任何形式的数值0，如0、0.0、0j。
  - 空的sequence，如''、()、[]。
  - 空的map，如{}。
  - 自定义类中有__bool__和__len()__方法，且实例的此方法返回0或布尔值
    False。

  #+BEGIN_SRC python :session
    class Foo:
        def __init__(self, num):
            self.num = num
        def __bool__(self):
            return bool(self.num)

    f0 = Foo(0)
    f1 = Foo(1)

    any([None, False, 0, 0.0, 0j, '', [], (), {}, f0, f2])
    any([f1])
  #+END_SRC

  #+RESULTS[0137abfc43ce548b5c7c5a908abfd134c19ec952]:
  :
  : ... ... ... ... >>> >>> >>> >>> >>> >>> False
  : True

  操作符（Operations）和内置函数如果返回布尔型，要么返回1或True作为
  “真”，要么返回0或False作为“假”。

  *注意* ：or和and操作符总是将其一个operands作为返回值。

* 布尔值操作-and、or、not
   下表按有限级排序：

   | Operation | 结果                                    | 注意 |
   |-----------+-----------------------------------------+------|
   | x or y    | 如果x为false，则返回y，否则返回x        | (1)  |
   | x an y    | 如果x为false，则返回x，否则返回y        | (2)  |
   | not x     | 如果x为false，则返回True，否则返回False | (3)  |

   注意点：

   1. 只有x为假，才计算y。
   2. 只有x为真，才计算y。
   3. 三者中not的优先级最低，所以not a == b相当于not (a == b)，而a ==
      not b为语法错误。

* 比较
  Python有8个比较操作符，优先级相同，不过都比布尔值操作符高。比较操作
  可任意组合，如x < y <= z等价于x < y and y <= z（与C不同），不过y只
  计算一次，且如果x < y 为假，不计算z，直接返回False。

  | 操作符 | 含义         |
  |--------+--------------|
  | <      | 小于         |
  | <=     | 小于等于     |
  | >      | 大于         |
  | >=     | 大于等于     |
  | ==     | 等于         |
  | !=     | 不等于       |
  | is     | 对象完全相同 |
  | is not | 不为相同对象 |

  除不同类型的数字外，所有不同对象之间的比较都返回False。

  除非声明__eq__()方法，相同类的不同实例不相等。

  相同类的不同实例不能排序，除非有定
  义__lt__()、__le__()、__gt__()和__ge__()方法。（如需只进行比较，定
  义__lt__()和__gt__()方法就足够。）

  is和is not不能定制，可接受任意2个对象，从不返回错误。

  in 和 not in两个操作符具有比较操作符的相同优先级，仅支持sequence类
  型。

* 数字类型-int、float、complex
  一共有3种数字类型：整型、浮点型和复数。此外，布尔型是整型的子类型。
  整型精度无限，浮点型通常与C中的double型精度相同（可使用
  sys.float_info变量查看）。复数分实部和虚部（都为浮点型），如果z为复
  数，则可使用z.real和z.image分别获取实部和虚部。数字后添加j或J可转变
  为虚数。

  Python支持不同的数字类型一起计算。多个类型一起计算时，“窄类型”转换
  为“宽类型”，整型比浮点型窄，浮点型比复数窄。数字之间的比较也使用相
  同方法。

  下表为除复数，所有数字类型都可使用的操作符，按优先级从低到高排序
  （所有数字操作符的优先级都比比较操作符低）。

  | 操作符          | 结果                         | 注意点 | 完整文档  |
  |-----------------+------------------------------+--------+-----------|
  | x + y           | 和                           |        |           |
  | x - y           | 差                           |        |           |
  | x * y           | 积                           |        |           |
  | x / y           | 商                           |        |           |
  | x // y          | x整除y的结果                 | (1)    |           |
  | x % y           | x / y的余值                  | (2)    |           |
  | -x              | 相反数                       |        |           |
  | +x              | 保持不变                     |        |           |
  | abs(x)          | x的绝对值或虚部              |        | abs()     |
  | int(x)          | 将x转换为整型                | (3)(6) | int()     |
  | float(x)        | 将x转换为浮点型              | (4)(6) | float()   |
  | complex(re, im) | 生成复数，img虚数部分默认为0 | (6)    | complex() |
  | c.conjugate()   | 复数c的共轭？                |        |           |
  | divmode(x, y)   | 相当于tuple(x // y, x % y)   | (2)    | divmode() |
  | pow(x, y)       | x的y次方                     | (5)    | pow()     |
  | x ** y          | x的y次方                     | (5)    |           |

   1. 结果无小数，不一定为整型。结果总是向负的最小值靠近：

	  #+BEGIN_EXAMPLE python
        >>> 1 // 2
        0
        >>> (-1) // 2
        -1
        >>> 1 // (-2)
        -1
        >>> (-1) // (-2)
        0
	  #+END_EXAMPLE

   2. 不适用于复数，而是使用abs()函数转换为浮点型。？？？

   3. 将浮点型转换为整数时，同C一样会“舍入”。参考math.floor()和
      math.ceil()函数。

   4. 浮点型可接受字符串“nan”和"inf"作为非数字和无限数，前面可带正负号。

   5. 如其他语言一样，Python规定pow(0,0)和0**0的值都为1。

   6. 可使用0-9和任何Unicode等价的字符。？？

   所有numbers.Real类型（即int和float类型）还可接受如下操作：

   | 操作          | 结果                                                  |
   |---------------+-------------------------------------------------------|
   | math.trunc(x) | 去除小数点后面内容                                    |
   | round(x[,n])  | 小数点后n个数，如果无第二个参数，相当于正真的四舍五入 |
   | math.floor(x) | <=x 的最大整数                                        |
   | math.ceil(x)  | >=x 的最小整数                                        |

** 整数位运算
	位运算只适用于整数。负数进行位运算时取反补码（以保证足够的bit防止
	计算时溢出）。

	位运算操作符优先级高于比较运算符，低于算术运算符；~运算符与加减运
	算符有相同优先级。

	下表为优先级从低到高的的位运算符：

    | 操作     | 结果 | 注意点 |
    |----------+------+--------|
    | x 竖线 y | 或   |        |
    | x ^ y    | XOR  |        |
    | x & y    | 和   |        |
    | x << n   | 左移 | (1)(2) |
    | x >> n   | 右移 | (1)(3) |
    | ~x       | 取反 |        |

	1. n为负数时返回ValueError错误
	2. 位左移相当于没有溢出检查的乘以pow(2,n)
	3. 位右移相当于没有溢出检查的除以pow(2,n)

** 整型的额外方法
*** int. *bit_length* ()
	返回以二进制表示整数的位数：

    #+BEGIN_SRC python :session
       n = -37
       bin(n)
       n.bit_length()
    #+END_SRC

    #+RESULTS[8810302f5722bb340d6945ff9942a8590dbc799f]:
     :
     : '-0b100101'
     : 6

	等价于：

	#+BEGIN_SRC python
       def bit_length(self):
           s = bin(self)
           s = s.lstrip('-0b')
           return len(s)
	#+END_SRC

*** int. *to_bytes* (length,byteorder,*,signed=False)？？？
*** clasmethod int *from_bytes* (bytes,byteorder,*,signed=False)？？？
** 浮点型的额外方法
*** float. *as_integer_ratio* ()

    #+BEGIN_SRC python :session
      (-0.2).as_integer_ratio()
      (1.0).as_integer_ratio()
    #+END_SRC

    #+RESULTS[f517333064b3617d1033e12581eab9467fed88f8]:
    : (-3602879701896397, 18014398509481984)
    : (1, 1)

*** float. *is_integer* ()

    #+BEGIN_SRC python :session
      (-0.2).is_integer()
      (3.2).is_integer()
    #+END_SRC

    #+RESULTS[4a065e04afa4e754ac4170314f2b848504579849]:
    : False
    : False

*** float. *hex* ()
*** classmethod float. *fromhex* (s)
** numeric类型哈希计算（Hashing）
* Iterator类型
  Python支持在容器（container）外面嵌套一个迭代层。此实现使用了2个不
  同的方法，帮助用户自定义类支持迭代。后面讨论的Sequence总是支持下面
  的迭代方法。

  容器对象需支持container. *__iter__* ()方法提供迭代支持，此方法： 返
  回一个迭代对象。

  迭代对象本身需支持iterator. *__iter__* ()和iterator. *__next__* ()
  方法。

** Generator类型
	如果容器对象有__iter__()方法，且为generator实现，则自动返回迭代对
	象，且支持__iter__()和__next__()方法。

* Sequence类型-list、tuple、range
  3个基本的Sequence类型为：链表、元组和范围。另外两个专门用于处理二进
  制数据（binary date）和文本字符串（text string）Sequence类型在专门
  章节讨论。
** 常用的Sequence操作符
   下表的操作对mutable和immutable都有效。其中s和t都是类型相同的
   Sequence，n、i和j都是整数索引，x？

   整个表中的优先级递增。in和not in具有相同的优先级，+和*的优先级同用
   于数字运算一样。

   | 操作符               | 结果                               | 注意点 |
   |----------------------+------------------------------------+--------|
   | x in s               | 如果x与s中某个元素equal，返回True  | (1)    |
   | x not in s           | 如果x与s中某个元素equal，返回False | (1)    |
   | s + t                | 将s和t连接                         | (6)(7) |
   | s * n 或 n * s       | 将s复制n次                         | (2)(7) |
   | s[i]                 | s中的第i个元素，第一个元素为s[0]   | (3)    |
   | s[i:j]               | 截取s中第i到j的元素                | (3)(4) |
   | s[i:j:k]             | 截取s中第i到j的元素，跨度为k       | (3)(5) |
   | len(s)               | s的元素个数                        |        |
   | min(s)               | s中最下的元素                      |        |
   | max(s)               | s中最大的元素                      |        |
   | s.index[x[, i[, j]]] | s中第一个x的索引（索引i后，j前）   | (8)    |
   | s.count(x)           | s中x的个数                         |        |

   同类型的sequence可做比较。比如链表和元组，为逐个比较其中的元素。即
   两个Sequence相等，则需对应位置的元素相等，且类型相同，长度相等：

   #+BEGIN_SRC python :session
     [1, 2, 3] == [1, 2, 3]
     [1, 2, 3] == (1, 2, 3)
   #+END_SRC

   #+RESULTS[53ca1bdf37af220736955e12a718c6509d8f0c06]:
   : True
   : False

   注意点：

	1. in和not in通常用来判断是否包含某元素，不过一些特殊的Sequence，
       如str、bytes和bytearray也可同样使用：

    #+BEGIN_SRC python :session
      'gg' in 'egg'
      b'a' in b'abc'
      'a' in b'abc'
    #+END_SRC

    #+RESULTS[14b5f1634155ec3e15feeb4aebda2079e4a135fb]:
    : True
    : True
    : Traceback (most recent call last):
    :   File "<stdin>", line 1, in <module>
    : TypeError: a bytes-like object is required, not 'str'

	2. n如果小于0，则作为0对待，即返回相同类型的Sequence，但其中无元素。

       #+BEGIN_SRC python :session
          l = [1, 2, 3]
          l * 0
          l * -1
       #+END_SRC

       #+RESULTS[a7f3ebdeb4c93a76e0799a5c836d2cb5619ed431]:
       :
       : []
       : []

    *注意* ：复制s本身并不是正真复制，而是多次引用原来的元素：

    #+BEGIN_SRC python :session
      lists = [[]] * 3
      print(lists)
      lists[0].append(3)
      print(lists)
    #+END_SRC

    #+RESULTS[d58102302c25ac67990798dc71a99e9ec03ae85e]:
     :
     : [[], [], []]
     : >>> [[3], [3], [3]]

	3. 如果i或j为负数，则相当于les(s)+i和len(s)+j。

	4. 截取s时，如果没有i，则i相当于0；如果没有j，则j相当于len(s)。如
       果i或j大于len(s)，则默认为len(s)；如果i >= j，则结果中没有任何
       元素。

	5. 使用步数k参数：相当于截取元素i、i+k、i+2k...，直到大于或等于
       j（不包含j）。k值不能为0，如果为None则默认为1。

	6. 拼接immutable类型的Sequence时，会生成新对象。意味着复制自身拼接
       时耗时按次方增加，如需使耗时线性等价可：

	   1. 如果是拼接str对象，可先链表再使用str.join()函数合成字符串；
          或者将其写入一个io.StringIO实例，最后再获取。

	   2. 如果拼接bytes对象，可同字符串一样使用bytes.join()函数或
          io.BytesIO；或者使用bytearray，bytearray对象为mutable类型，
          效率更高。

	   3. 如果拼接元组，可转换为链表再操作。

	   4. 对于其他类型，参考相应文档。

	7. 如range这样的对象，不支持拼接和复制。

	8. 如果s中无元素x，则返回Valueerror错误。如果有i和j参数，则相当于
       s[i:j].index(x)，只是没有数据复制，且返回索引值相对于sequence的
       起始位置，而非截断的起始位置。

** Immutable Sequence类型
   immutable类型中有，而mutable类型中没有实现的唯一操作是hash()。

   此特性可使immutable类型，如元组，可作为字典(dict)的key值，或另存为
   set或frozenset。

   #+BEGIN_SRC python :session
     hash((1, 2, 3))
   #+END_SRC

   如果尝试hash含unhashable元素的immutable类型，则返回Typeerror错误。
   如：

   #+BEGIN_SRC python :session
     hash(([1, 2], 3))
   #+END_SRC

   #+RESULTS[6a128c1614b208c615c076ac9b4fdc89231aa315]:
   : Traceback (most recent call last):
   :   File "<stdin>", line 1, in <module>
   : TypeError: unhashable type: 'list'

** Mutable Sequence类型
   下表为只有mutable类型才有的操作。其中s为mutable类型的实例，t为任何
   可迭代的对象，x?

   | 操作              | 结果                                                 | 注意点 |
   |-------------------+------------------------------------------------------+--------|
   | s[i]=x            | 使用x替换s中索引为i的元素                            |        |
   | s[i:j]=t          | 将s中i->j截断替换为可迭代对象t中的内容               |        |
   | del s[i:j]        | 与s[i:j]=[]同                                        |        |
   | s[i:j:k]=t        | 将截断对应位置上的元素逐个替换为t中的元素            | (1)    |
   | del s[i:j:k]      | 将截断s[i:j:k]从s中删除                              |        |
   | s.append(x)       | 将x添加到s末尾，相当于s[len(s):len(s)]=[x]           |        |
   | s.clear()         | 清除s中所有元素，相当于del s[:]                      | (5)    |
   | s.copy            | 复制s，相当于s[:]                                    | (5)    |
   | s.extend(t)或s+=t | 将t中的元素拼接到s后，基本上等价于s[len(s):len(s)]=t |        |
   | s *= n            | s自身复制n次                                         | (6)    |
   | s.insert(i, x)    | 将s中第i个元素变为x，等价于s[i:i]=x                  |        |
   | s.pop([i])        | 返回s中第i个元素，并将其删除                         | (2)    |
   | s.remove(x)       | 将s中出现的第一个x删除                               | (3)    |
   | s.reverse()       | 将s自身逆序。                                        | (4)    |

   注意点：

	1. t需与截断的长度相等。

       #+BEGIN_SRC python :session
          s = [1, 2, 3, 4]
          print(s[0::2])
          s[0::2] = ['a', 'b']
          print(s)
          s[0::2] = ['a', 'b', 'c']
       #+END_SRC

       #+RESULTS[1e58544f13894e154d7091d122d872093f579d6d]:
        :
        : [1, 3]
        : >>> ['a', 2, 'b', 4]
        : Traceback (most recent call last):
        :   File "<stdin>", line 1, in <module>
        : ValueError: attempt to assign sequence of size 3 to extended slice of size 2

	2. 可选参数i默认值为-1，即默认删除最后一个元素。
	3. 如果s中不存在元素x，则返回Valueerror错误。
	4. 为逆序大型sequence时的效率考虑，reverse()方法直接将该sequence逆
       序。为提醒使用者，故意不返回逆序后的sequence。
	5. clear()和copy()方法是为了兼容不支持截断的mutable序列类型接口，
       如set和dict。
	6. n为整数，或有__index__()方法的对象。当n<=0时，清空。同上，复制
       自身并不是真正复制，而是复制reference：

       #+BEGIN_SRC python :session
          t = [[1], [2]]
          t *= 2
          print(t)
          t[0].append(1000)
          print(t)
       #+END_SRC

       #+RESULTS[ef737dbf67d1269a29a39f6bc2426bd90792ec54]:
       :
       : >>> [[1], [2], [1], [2]]
       : >>> [[1, 1000], [2], [1, 1000], [2]]

** 链表（List）
   链表为mutable类型的sequence，一般用来存储相同类型的元素。

*** class *list* ([iterable])
	构建链表有下面方法：

	 - 使用方括号构建空链表。
	 - 使用方括号，指定其中元素4用逗号隔开。如[a]、[a,b,c]。
	 - 或者为[x for x in iterable]的形式。
	 - 或者使用类型构造器：list()或list(iterable)。

	 使用最后一种方法，list构造链表时，新生成的链表中元素顺序同原来的
	 iterable相同。iterable可以是sequence、支持迭代的容器、或者是
	 iterator对象。 如果iterable本身就是链表，则是复制其reference。如
	 果没有参数，则返回空链表：

     #+BEGIN_SRC python :session
       a = [[1], [2]]
       b = list(a)
       print(a)
       print(b)

       a[0].append(1000)
       print(a)
       print(b)
     #+END_SRC

     #+RESULTS[17f994bc42b7147fa28aa69158de0314e9f754a3]:
     :
     : >>> [[1], [2]]
     : [[1], [2]]
     : >>> >>> [[1, 1000], [2]]
     : [[1, 1000], [2]]

	 有许多其他操作符可生成链表，如sorted()。

	 除上面第一节Sequence通用和第二节mutable类型支持的操作符外，链表还支持sort方法：
**** *sort* (*, key=None,reverse=None)
	  元素见比较时，仅能使用“<”比较。如果比较过程中出现语义错误，如“1
	  < 'a'”，则整个排序过程终止（可能将原链表部分排序）。

	  key和reverse参数仅能以关键字参数的形式出现。

	  key参数为接受一个参数的函数，用来指定各元素比较内容，如
	  "key=str.lower"。此函数只在每个元素调用一次。默认值为None，表示
	  不计算每个元素中的key值。

	  如果reverse参数为True，则逆序排序。

	  同reverse函数一样，为保证操作大型sequence时的效率，排序直接改变
	  原来链表，也不返回排序后的链表。（可使用sorted()函数创建一个排序
	  后的新链表实例。）
** 元组（Tuple）
   元组是immutable类型的Sequence；常用来将类型不同的数据存储在一起，
   如内置函数enumarate()的返回的2元素元组；有时也用于存储immutable类
   型的Sequence，如作为set或dict的元素。？

   #+BEGIN_SRC python :session
     e = enumerate([1, 2, 3])
     for i in range(4):
         print(next(e, 'end'))
   #+END_SRC

   #+RESULTS[a2bde2e71d838787de06a4c6aa1d60a37029e796]:
   :
   : ... ... (0, 1)
   : (1, 2)
   : (2, 3)
   : end

*** class *tuple* ([iterable])
	构造元组有下面方法：

	 - 一对小括号表示空元组：()。
	 - 在原始后面加逗号表示一元素元组，可无小括号：a,或(a,)。
	 - 多个元素间用逗号隔开，可无小括号：a,b,c或(a,b,c)。
	 - 使用内置tuple构造器函数：tuple或tuple(iterable)。

	 最后一种方法构造的元组，其元素的顺序与参数iterable中的顺序相同。
	 iterable可为Sequence、支持迭代的容器或iterator对象。如果iterable
	 本来就是元组，则同链表一样，也是复制其reference，如果无参数则生成
	 空元组：

     #+BEGIN_SRC python :session
       l = [[1], [2], [3]]
       t = tuple(l)
       print(l)
       print(t)

       l[0].append(100)
       print(l)
       print(t)
     #+END_SRC

     #+RESULTS[24c4e8175a011b7d25226ccf417569e120f5af04]:
     :
     : >>> [[1], [2], [3]]
     : ([1], [2], [3])
     : >>> >>> [[1, 100], [2], [3]]
     : ([1, 100], [2], [3])

	 *注意* ：实际上是逗号，而非小括号构成的元组。小括号基本可省略，但
	 在造成语义混淆的地方不可少，如f(a,b,c)为函数调用3个参数，二
	 f((a,b,c))则是调用了一个3元素元组参数。

	 元组支持前面第一节中，所有Sequence通用操作符。

	 对于不同类型元素的元组，可使用collections.namedtuple()类型实现通
	 过字符串名称获取索引，比纯数字索引更合适。

** 范围（Range）
   range类型为immutable的数字Sequence，常与for语句搭配表示循环次数。
*** class *range* (stop)
*** class *range* (start,stop[,step])
	所有参数都须为整数（内置int类型或有__index__方法的对象）。如果
	无step参数，默认为1；如果无start参数，默认为0；如果step参数为0，
	则返回ValueError错误。下面为range的用法举例：

    #+BEGIN_SRC python :session
       list(range(10))
       list(range(1, 11))
       list(range(0, 30, 5))
       list(range(0, 10, 3))
       list(range(0, -10, -1))
       list(range(0, -10, 1))
       list(range(0))
       list(range(1, 0))
    #+END_SRC

    #+RESULTS[b8870d8540cdec15e1316a334965df02944ffc11]:
     : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
     : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
     : [0, 5, 10, 15, 20, 25]
     : [0, 3, 6, 9]
     : [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]
     : []
     : []
     : []

	除拼接和复制外，range支持上面第一小节中所有Sequence支持的操作。原
	因为range对象只能表示严格模式的Sequence，拼接和复制会损坏此模式。

	range对象有start、stop和step3属性，分别对应创建时的三个值：

    #+BEGIN_SRC python :session
      r = range(1, 1000, 10)
      print(r.start)
      print(r.stop)
      print(r.step)
    #+END_SRC

    #+RESULTS[f9fc1c5f14e3ac7337647f34fb759a95de1b6673]:
    :
    : 1
    : 1000
    : 10

	较之链表和元组，range占用内存更小。无论表示序列个数多少，所占内存
	固定：只存储start、stop和step3个值，各元素需要时才计算。

	range实现了collections.abc.Sequence ABC，支持元素包含测试，索引查
	找，截断和负截断：

    #+BEGIN_SRC python :session
      r = range(1, 10)
      2 in r
      20 in r
      r.index(5)
      r[5]
      r[:5]
      r[-1]
    #+END_SRC

    #+RESULTS[4b45307c89036dddea5d4fb032b6b58603e9644d]:
    :
    : True
    : False
    : 4
    : 6
    : range(1, 6)
    : 9

	使用==和!=判断range是否相等时，同一般Sequence一样，即两者中元素是
	否逐个相等。两个相等的range可有不同的start、stop和step值，如
	range(0) == range(2, 1, 3)。

* 文本Sequence类型-str
  Python中文本数据使用字符串(str/strings)对象存储。字符串对象为
  immutable类型的Sequence，其中元素为"Unicode code point"。字符串对象
  可用下面方式表示：

   - 单引号：'里面可用"双引号"'。
   - 双引号："里面可有'单引号'"。
   - 三引号：'''可以是三个单引号'''，"""也可以是三个双引号"""。

   三引号表示的字符串可跨行书写，且保留换行符。

   在同一个表达式中，如果字符串间只有空格，则自动拼接：("spam"
   "eggs") == "spam eggs"。

   由于Python并没有字符类型，所以使用索引获得字符串的某个元素时，返回
   值为长度为1的字符串。所以，对于非空字符s，有s[0] == s[0:1]。

   由于字符串本身为immutable，为保证效率，可拼接字符串时可使用
   str.join()和io.StringIO方法。

   - class *str* (object='')
   - class *str* (object='', encoding='utf-8',errors='strict')
	 返回object的字符串形式。如果无object参数，返回空字符串；否则，返
     回值由下面规则决定：

	 如果encoding和errors参数都没有，返回值实际上是object.__str__()方
     法的返回值。对于字符串对象，则是返回该字符串本身；如果
     object无__str__()方法，则是返回调用repr(object)函数的返回值。

	 如果encoding和errors中只要出现任意一个，object就须为类bytes对象
     （bytes或bytearray）。此时，str(bytes, encoding, errors)相当于
     bytes.decode(encoding, errors)。

	 将bytes对象传递给str()函数，且不带encoding和errors参数时，返回"非
     正式"字符串：

   #+BEGIN_SRC python :session
     str(b'Zoot')
     str(b'Zoot', encoding='utf-8')
   #+END_SRC

   #+RESULTS[32fd73df225dae34bf6399b38f6dc51ac3e9a583]:
   : "b'Zoot'"
   : 'Zoot'

** 字符串方法
   字符串类型支持所有Sequence通用的操作，此外还支持下面列举的操作。

   字符串支持两种格式化方法：str.format()方法，和与C中printf类似的方
   法。
*** str. *capitalize* ()
	返回复制后的字符串，第一个字母大写，其余字母小写。

    #+BEGIN_SRC python :session
      'claudio'.capitalize()
    #+END_SRC

    #+RESULTS[d5f95c7fff1851f22a9d61bf878206b0b5f4ca80]:
    : 'Claudio'

*** str. *casefold* ()
	相当于str.lower()方法。[[http://www.cnblogs.com/zhanmeiliang/p/5988207.html][@爱尔兰时空]]：

	lower()只对'A-Z'有效，不能处理其他语言中小写的问题，如德语中'ß'的
	小写为'ss'：

    #+BEGIN_SRC python :session
      s = 'ß'
      s.lower()
      s.casefold()
    #+END_SRC

    #+RESULTS[0697c4ef3a8e1439fb26555eec81d54e4f776435]:
    :
    : 'ß'
    : 'ss'

*** str. *center* (width[,fillchar])
	将字符串扩展为长度width，原字符串至于中间，空白处使用fillchar字符
	填充（默认为ASCII空格字符），如果width小于或等于len(s)，则返回原
	来字符串：

    #+BEGIN_SRC python :session
      s = 'claudio'
      s.center(10)
      s.center(10, '|')
      s.center(1)
    #+END_SRC

    #+RESULTS[b34234826f548cd7dc3ae6e917ea372e112a11ea]:
    :
    : ' claudio  '
    : '|claudio||'
    : 'claudio'

*** str. *count* (sub[,start[,end]])
	返回字符串sub出现的次数，可指定在截断[start:end]间计算：

    #+BEGIN_SRC python :session
      s = 'banana'
      s.count('an')
      s.count('an', -3)
      s.count('an', 3)
    #+END_SRC

    #+RESULTS[c6e9c6f7614c91601f8268bce67cb034ccde5ff6]:
    :
    : 2
    : 1
    : 1

*** str. *encode* (encoding='utf-8',errors='strict')
	以bytes对象的形式返回字符串编码后的结果。默认编码为utf-8；默认
	errors值为strict，即当出现编码错误时返回UnicodeError错误，其他可
	取值为ignore、replace、xmlcharrefreplace和backslashreplace，以及
	其他通过codecs.register_error()方法寄存的名称。

    #+BEGIN_SRC python :session
      'claudio'.encode()
      '学习'.encode()
    #+END_SRC

    #+RESULTS[90b9e4e1f2822bcabab7dffa1fe415529f2845b9]:
    : b'claudio'
    : b'\xe5\xad\xa6\xe4\xb9\xa0'

*** str. *endswith* (suffix,[,start[,end]])
	如果字符串以suffix结尾返回True，否则返回False。可指定在截断
	[start:end]中计算：

    #+BEGIN_SRC python :session
      'banana'.endswith('na')
      'banana'.endswith('na', 5)
      '香蕉'.endswith('蕉')
    #+END_SRC

    #+RESULTS[fdedc626806beab522f616fa23bce60945428848]:
    : True
    : False
    : True

*** str. *expandtabs* (tabsize=8)
	返回复制后的字符串，其中tab字符使用一个或多个空格替代，可指定一个
	tab字符所占列数：

    #+BEGIN_SRC python :session
      '01\t012\t0123\t01234'.expandtabs()
      '01\t012\t0123\t01234'.expandtabs(4)
    #+END_SRC

    #+RESULTS[5c811a8cf738b66e5eb6517da4244e1c7ca2f24f]:
    : '01      012     0123    01234'
    : '01  012 0123    01234'

*** str. *find* (sub[,start[,end]])
	返回从左到右起，sub出现在字符串中的索引，可指定在截断[start:end]
	中计算，如果无sub字符串出现，则返回-1。

    #+BEGIN_SRC python :session
      'banana'.find('a')
      'banana'.find('a', 4)
      'banana'.find('a', 19)
    #+END_SRC

    #+RESULTS[d9397cf5feceb92c9230f86b913e32c0fc27863a]:
    : 1
    : 5
    : -1

	为效率考虑，只有需知道sub在字符串中的索引时才使用find()方法，如果
	只是判断是否出现sub，使用in操作符即可：

    #+BEGIN_SRC python :session
      'Py' in 'Python'
      'py' in 'Python'
    #+END_SRC

    #+RESULTS[f0de536f15e64dbeacaf66261e8059886f0fb0da]:
    : True
    : False

*** str. *format* (*args,**kwargs)
	对字符串进行格式化。字符串中可含普通字符，也可含需被替换的place
	holder，用{}表示。{}中可为数字或关键字参数，分别对应format中的
	args和kwargs：

	如需打印大括号本身，使用双层大括号：

    #+BEGIN_SRC python :session
      'the sum of 1 + 2 is {0}'.format(1 + 2)
      'the sum of {a} + {b} is {0}'.format(1 + 2, a=1, b=2)
      'format中使用{{{{}}}}表示{{}}本身.'.format()
    #+END_SRC

    #+RESULTS[b5afbc7c13efc2e8d2869e68a97d0b0879f36beb]:
    : 'the sum of 1 + 2 is 3'
    : 'the sum of 1 + 2 is 3'
    : 'format中使用{{}}表示{}本身.'

*** str. *format_map* (mapping)
	与str.format(***mapping)相同，不过是直接使用mapping，而不是复制到
	dict中。如果mapping本身就是dict的一个子类，则非常方便。？？？：

    #+BEGIN_SRC python :session
      d = {'name': 'Claudio'}
      '{name} was born in ?'.format(**d)
      '{name} was born in ?'.format_map(d)

      class Default(dict):
          def __missing(self, key):
              return key

      '{name} was born in ?'.format(**Default(name='Claudio'))
      '{name} was born in ?'.format_map(Default(name='Claudio'))
    #+END_SRC

    #+RESULTS[5660bc8c376ff0e2df9a65871e66b07b291471ea]:
    :
    : 'Claudio was born in ?'
    : 'Claudio was born in ?'
    : >>> >>> ... ... ... >>> >>> 'Claudio was born in ?'
    : 'Claudio was born in ?'

*** str. *index* (sub[,start[,end]])
	同find()方法类似，不过当不能在字符串中找到sub时返回ValueError错误，
	而非-1：

    #+BEGIN_SRC python :session
      'banana'.index('a')
      'banana'.index('A')
    #+END_SRC

    #+RESULTS[d1f99aec023cad1e2df83201b6c18bb4b9be277e]:
    : 1
    : Traceback (most recent call last):
    :   File "<stdin>", line 1, in <module>
    : ValueError: substring not found

*** str. *isalnum* ()
	如果字符串不为空，且其中所有字符非数字即"字母"，则返回True：

    #+BEGIN_SRC python :session
      '111'.isalnum()
      '1abc'.isalnum()
      ''.isalnum()
      '11#'.isalnum()
    #+END_SRC

    #+RESULTS[64c759e1c39d76d3bf059fa4eae875f0dc58e9ba]:
    : True
    : True
    : False
    : False

	只要c.isalpha()、c.isdecimal()、c.isdigit()或c.isnumeric()中一个
	返回True，则c.isalnum()就返回True。

*** str. *isalpha* ()
	如果字符串中不为空，且所有字符都为“字母”则返回True。只要Unicode字
	符数据库中认为是"字母"都可。

	*注意* ：不同于Unicode Standard中定义的"Alphabetic"。

    #+BEGIN_SRC python :session
      'a'.isalpha()
      '一'.isalpha()
    #+END_SRC

    #+RESULTS[a642291f6b8b9de18b3c7270c3edee58f4829289]:
    : True
    : True

*** str. *isdecimal* ()
	字符串不为空，且所有字符都是十进制数字符，即所有能用于表示十进制
	数的字符。

    #+BEGIN_SRC python :session
      '1212'.isdecimal()
      '12.2'.isdecimal()
    #+END_SRC

    #+RESULTS[43583aa61fbd503d3184e8ee9697cc11352fcbce]:
    : True
    : False

*** str. *isdigit* ()
	除isdecimal字符外，还包含“compatibility superscript digits”。？？？
*** str. *isidentifier* ()
	如果是Python中合法的identifier（变量名、函数名和类名），则返回
	True：

    #+BEGIN_SRC python :session
      'isidentifier'.isidentifier()
      'is_identifier'.isidentifier()
      'is-identifier'.isidentifier()
      'is2identifier'.isidentifier()
      '_is_idendify'.isidentifier()
      'is_identifier?'.isidentifier()
    #+END_SRC

    #+RESULTS[47ec6e8c215cd5da97416a61af5045e47c381b40]:
    : True
    : True
    : False
    : True
    : True
    : False

	如需判断是否是“保留字”，使用keuword.iskeyword()方法：

	#+BEGIN_EXAMPLE python
       >>> import keyword
       >>> keyword.iskeyword('def')
       True
       >>> keyword.iskeyword('class')
       True
       >>> keyword.iskeyword('name')
       False
       >>> keyword.iskeyword('__init__')
       False
	#+END_EXAMPLE

    #+BEGIN_SRC python :session
      import keyword
      keyword.iskeyword('def')
      keyword.iskeyword('class')
      keyword.iskeyword('__init__')
    #+END_SRC

    #+RESULTS[41997db43a0fe4c570c41715ad478f071347bd36]:
    :
    : True
    : True
    : False

*** str. *islower* ()
	含至少一个有大小写区分的字符，且所有有大小写区别的字符都为小写：

    #+BEGIN_SRC python :session
      'abc'.islower()
      ''.islower()
      'ab三'.islower()
      '三'.islower()
      'ab3'.islower()
    #+END_SRC

    #+RESULTS[b9478b3115cb34d7665feff76ec18f68d49a7c2e]:
    : True
    : False
    : True
    : False
    : True

*** str. *isnumeric* ()？？？
	字符串不为空，且所有字符都为数字字符：

    #+BEGIN_SRC python :session
      '012'.isdigit()
      '0x12'.isdigit()
      '0X12'.isdigit()
    #+END_SRC

    #+RESULTS[59a1298bfa65b97c02eba9800d8d6cb7bdefcd21]:
    : True
    : False
    : False

	*？* ：和isdigit的区别。

*** str. *isprintable* ()
	只含所有可见字符+空格字符，以及空字符串返回True：

    #+BEGIN_SRC python :session
      'a'.isprintable()
      ' '.isprintable()
      ''.isprintable()
      '\n\t'.isprintable()
    #+END_SRC

    #+RESULTS[bb1ef90eea86f098a2d903594e3096f10108cc38]:
    : True
    : True
    : True
    : False

*** str. *isspace* ()
	所有空白字符。

    #+BEGIN_SRC python :session
      ''.isspace()
      ' '.isspace()
      '\n\t'.isspace()
      '\b\v'.isspace()
    #+END_SRC

    #+RESULTS[9699c54afdb2f683e2a23a886401e3966bfc80aa]:
    : False
    : True
    : True
    : False

*** str. *istitle* ()
	含至少一个字符，为标题形式的字符串返回True。

    #+BEGIN_SRC python :session
      ''.istitle()
      'A'.istitle()
      'I Have a Dream!'.istitle()
      'I Have A Dream!'.istitle()
      '我是标题'.istitle()
    #+END_SRC

    #+RESULTS[eb48c8706d34a6b053e0eae5b5c72c6c0b133fe5]:
    : False
    : True
    : False
    : True
    : False

*** str. *isupper* ()
	含至少一个有大小写区分的字符，且所有区分大小写的字符都为大写。
*** str. *join* (iterable)
	使用字符串将iterable中的所有元素拼接，如果任何一个元素不为字符串
	（含bytes类型），则返回Valueerror错误。

    #+BEGIN_SRC python :session
      '|'.join(['a', 'b', 'c'])
      '|'.join([])
      '|'.join(['a', 'b', 3])
    #+END_SRC

    #+RESULTS[c075e66eb2c17aeda663059c9b16d4a34b15ca31]:
    : 'a|b|c'
    : ''
    : Traceback (most recent call last):
    :   File "<stdin>", line 1, in <module>
    : TypeError: sequence item 2: expected str instance, int found

*** str. *ljust* (width[,fillchar=' ''])
	返回指定宽带为width，左对齐后的字符串，使用fillchar填充空白字符。
	如果width<=len(s)则返回原来字符串。

    #+BEGIN_SRC python :session
      'claudio'.ljust(10)
      'claudio'.ljust(10, '|')
      'claudio'.ljust(1, '|')
    #+END_SRC

    #+RESULTS[dcb9657934abdb6a91649b27b950df16f0730db4]:
    : 'claudio   '
    : 'claudio|||'
    : 'claudio'

*** str. *lower* ()
	返回复制后的字符串，并将所有有大小写区别的字符转换为小写。
*** str. *lstrip* ([chars])
	返回复制后的字符串，将左边的含chars中字符的所有字符删除，如果参数
	为None，则char默认为' '。

	*注意* ：chars不是前缀，而是单个字符的组合：

    #+BEGIN_SRC python :session
      '   i have a dream   '.lstrip()
      'www.google.com'.lstrip('w.com')
    #+END_SRC

    #+RESULTS[a8e1dc00f6da29a29748f54e695f3b1dc4aa4642]:
    : 'i have a dream   '
    : 'google.com'

*** static str. *maketrans* (x[,y[,z]])
	此方法为静态方法。作用是返回一个用于str.translate()方法翻译字符串
	的字典类型。

	如果只有一个参数，则须为字典型，key值可为单个字符字符串或Unocide
	值，value值可为单个字符字符串、Unicode值，任意长度字符串或None。

	如果是两个参数，则须为长度相等的字符串，对应位置的字符分别成为生
	成字典的key值和value值。

	如果是三个参数，最后一个参数需为字符串，其中的字符为会成为生成字
	典的key值，对应的value值则为None，即使用str.translate()方法时将删
	除的字符：

    #+BEGIN_SRC python :session
      str.maketrans({'1': '一'})
      str.maketrans("123456789", '一二三四五六七八九')
      str.maketrans("123456789", '一二三四五六七八九', '0')
    #+END_SRC

    #+RESULTS[75c947fec4f31fd9ba3d5798910f73edebc9a61e]:
    : {49:     '一'}
    : {49:     19968, 50: 20108, 51: 19977, 52: 22235, 53: 20116, 54: 20845, 55: 19971, 56: 20843, 57: 20061}
    : {48:     None, 49: 19968, 50: 20108, 51: 19977, 52: 22235, 53: 20116, 54: 20845, 55: 19971, 56: 20843, 57: 20061}

*** str. *partition* (sep)
	将字符串在第一次出现sep时分割，返回一个3元素元组，其中第一个元素
	为sep前面的字符串，第二个元素为sep本身，第三个元素为后面的字符串。
	如果字符串中不含sep，则第一个元素为字符串本身，后面两个元素为空字
	符串：

    #+BEGIN_SRC python :session
      s = 'banana'
      s.partition('a')
      s.partition('an')
      s.partition('X')
    #+END_SRC

    #+RESULTS[167d06c51b698a164715738c32e400adbc15d635]:
    :
    : ('b', 'a', 'nana')
    : ('b', 'an', 'ana')
    : ('banana', '', '')

*** str. *replace* (old,new[,count])
	将字符串中所有的old都替换为new。如果有count参数，则只替换左起
	count个：

    #+BEGIN_SRC python :session
       s = 'banana'
       s.replace('an', 'AN')
       s.replace('an', 'AN', 1)
       s.replace('an', 'AN', 100)
       s.replace('an', 'AN', 0)
    #+END_SRC

    #+RESULTS[638d9f173428bafc184b40e255e33fde7cf72077]:
     :
     : 'bANANa'
     : 'bANana'
     : 'bANANa'
     : 'banana'

*** str. *rfind* (sub[,start[,end]])
	返回从右其字符串中第一次出现sub的索引，可指定在截断[start:end]中
	计算。如果无sub字符串出现，则返回-1：

    #+BEGIN_SRC python :session
      s = 'banana'
      s.rfind('a')
      s.rfind('A')
      s.rfind('a', -4, -2)
    #+END_SRC

    #+RESULTS[244605f9cd087cc3b50276e9fd7b0e389a508043]:
    :
    : 5
    : -1
    : 3

*** str. *rindex* (sub[,start[,end]])
	同rfind，不过如果无sub字符串出现返回ValueError错误：

    #+BEGIN_SRC python :session
      s = 'banana'
      s.rindex('a')
      s.rindex('A')
    #+END_SRC

    #+RESULTS[3146c25983573041bac9396b8d16a24c7c4cae69]:
    :
    : 5
    : Traceback (most recent call last):
    :   File "<stdin>", line 1, in <module>
    : ValueError: substring not found

*** str. *rjust* (width[,fillchar])
	返回右对齐后的字符串，使用fillchar填充空白字符，默认为空格字符。
	如果width小于或等于len(s)，则返回字符串本身：

    #+BEGIN_SRC python :session
      'claudio'.rjust(10)
      'claudio'.rjust(10, '|')
      'claudio'.rjust(1, '|')
    #+END_SRC

    #+RESULTS[f74fdefa345dac22326797229bc1683b3b9045bd]:
    : '   claudio'
    : '|||claudio'
    : 'claudio'

*** str. *rpartition* (sep)
	同str.partition，不过是从右起分割；且如果sep不出现在字符串中，返
	回的3元素元组前两个元素为空字符串，最后一个为字符串本身：

    #+BEGIN_SRC python :session
      s = 'banana'
      s.rpartition('a')
      s.rpartition('an')
      s.rpartition('X')
    #+END_SRC

    #+RESULTS[081c08918c8c300c6a508ed2e25de9758e5599a9]:
    :
    : ('banan', 'a', '')
    : ('ban', 'an', 'a')
    : ('', '', 'banana')

*** str. *rsplit* (sep=None,maxsplit=-1)
	与split函数相同，只是从右边分割。

*** str. *rstrip* ([chars])
	返回字符串的副本，末尾中的字符只要出现在chars则被移除。如果无
	chars参数，或为None，则默认移除末尾的空白字符。

	*注意* ：chars不是后缀，而是所有需移除字符的集合。

    #+BEGIN_SRC python :session
      'www.google.com'.rstrip('w.com')
    #+END_SRC

    #+RESULTS[e67751d5c79e1b962dd63d291734c8fd606097e6]:
    : 'www.google'

*** str. *split* (sep=None,maxsplit=-1)
	返回字符串中所有“单词”组成的链表，使用sep作为单词间的分隔符。如果
	指定maxsplit参数，则进行maxsplit次分割（即结果最多可有maxsplit+1
	个元素）；如果未指定maxsplit参数，或其值为-1，则最大限度分割。

    #+BEGIN_SRC python :session
      s = 'banana'
      s.split('a')
      s.split('a', 1)
    #+END_SRC

    #+RESULTS[eda13b345172dbe1d5b067936e4df63fb00f45c9]:
    :
    : ['b', 'n', 'n', '']
    : ['b', 'nana']

	如果有sep参数，连续的分割字符串间会生成空白字符：

    #+BEGIN_SRC python :session
      'a,,b'.split(',')
    #+END_SRC

    #+RESULTS[b6d18eea0ed928ab07637d86a78168b7b73cae9d]:
    : ['a', '', 'b']

	分割字符串可为多个字符：

    #+BEGIN_SRC python :session
      'a<>b<>c'.split('<>')
    #+END_SRC

    #+RESULTS[33b33bada493f7de1ed6647d21ee3c836d9e798a]:
    : ['a', 'b', 'c']

	如果指定sep参数，且字符串为空，则生成的链表只含一个空字符串；如果
	不指定sep参数，且原字符串为空，或只含空白字符，则返回空链表：

    #+BEGIN_SRC python :session
      ''.split(',')
      ''.split()
      '  '.split()
    #+END_SRC

    #+RESULTS[b85162feb08832b6c28a97bf67574d339a3ee9d8]:
    : ['']
    : []
    : []

	如果无sep参数，或为None，则使用不同的算法：使用空白字符作为分割字
	符，且删除相邻的空字符，即使首末有空格，返回的链表中也不会含空字
	符串：

    #+BEGIN_SRC python :session
      '1 2 3'.split()
      '1\t2\t3'.split()
      '1 2 3'.split(maxsplit=1)
      '1    2     3'.split()
      '   1 2     3    '.split()
    #+END_SRC

    #+RESULTS[d65caf767d58fa5c6226de706eca5a30559a7337]:
    : ['1', '2', '3']
    : ['1', '2', '3']
    : ['1', '2 3']
    : ['1', '2', '3']
    : ['1', '2', '3']

*** str. *splitlines* ([keepends])
	在字符串中换行符处分割，返回链表。下表中的字符都会被当做换行符：

    | 字符     | 含义 |
    |----------+------|
    | \n       |      |
    | \r       |      |
    | \r\n     |      |
    | \v或\x0b |      |
    | \f或\x0c |      |
    | \x1c     |      |
    | \x1d     |      |
    | \x1e     |      |
    | \x85     |      |
    | \u2028   |      |
    | \u2029   |      |

    #+BEGIN_SRC python :session
      'ab c\n\rde fd\rkl\r\n'.splitlines()
    #+END_SRC

    #+RESULTS[1c42d82d7f2c0863a3bfeb487066a2c2a0903cf4]:
    : ['ab c', '', 'de fd', 'kl']

	结果中如需包含各种换行符，可指定keppends：

    #+BEGIN_SRC python :session
      'ab c\n\rde fd\rkl\r\n'.splitlines(keepends=True)
    #+END_SRC

    #+RESULTS[2d930a038874c7e68af164c122f10b1486d4341c]:
    : ['ab c\n', '\r', 'de fd\r', 'kl\r\n']

	不同于split()函数，如果指定sep参数，且原字符串为空，此函数返回空
	链表，末尾的换行符后并不生成一个空字符串：

	#+BEGIN_EXAMPLE python
       >>> ''.splitlines()
       []
       >>> 'One line\n'.splitlines()
       ['One line']
	#+END_EXAMPLE

    #+BEGIN_SRC python :session
      ''.splitlines()
      'One line\n'.splitlines()
    #+END_SRC

    #+RESULTS[0fd7f2dcd3174d0153de510519a398d0e8bb1957]:
    : []
    : ['One line']

	而split('\n')的对应结果为：

    #+BEGIN_SRC python :session
      ''.split('\n')
      'One line\n'.split('\n')
    #+END_SRC

    #+RESULTS[6acf371cf5b13cd57288971494c8aa7ec2578147]:
    : ['']
    : ['One line', '']

*** str. *startswith* (prefix[,start[,end]])
	如果字符串有前缀prefix，则返回True，可指定在截断[start:end]中计算：

	#+BEGIN_EXAMPLE python
       >>> 'banana'.startswith('b')
       True
       >>> 'banana'.startswith('a')
       False
       >>> 'banana'.startswith('')
       True
       >>> 'banana'.startswith('n', 2)
       True
	#+END_EXAMPLE

*** str. *strip* ([chars])
	返回原字符串副本，移除收尾中在chars中出现的字符。如果无chars参数，
	或为None，则默认删除首尾的空白字符。

	*注意* ：chars不是前缀或后缀，而是所有需移除字符的集合。

    #+BEGIN_SRC python :session
      'www.google.com'.strip('w.com')
    #+END_SRC

    #+RESULTS[b3c40593f07df6cabd71d2d402b00fe15408a6db]:
    : 'google'

*** str. *swapcase* ()

	返回大小写交换后的字符串副本。

	*注意* ：s.swapcase().swapcase() 可能并不等于s。

    #+BEGIN_SRC python :session
      s = 'Banana'
      s.swapcase()
      s.swapcase().swapcase()

      s = '一二三'
      s.swapcase()
      s.swapcase().swapcase()

      s = 'ß'
      s.swapcase()
      s.swapcase().swapcase()
    #+END_SRC

    #+RESULTS[9ef42a90cca670dcf9c3a8cc8bde065df5272eef]:
    :
    : 'bANANA'
    : 'Banana'
    : >>> >>> '一二三'
    : '一二三'
    : >>> >>> 'SS'
    : 'ss'

*** str. *title* ()
	将原字符串中每个单词首字母大写，其他字母小写作为返回值：

    #+BEGIN_SRC python :session
      'i have a dream'.title()
      '我有一个梦想'.title()
    #+END_SRC

    #+RESULTS[7d7209d1da419540555d154a16ff9b599355fb7c]:
    : 'I Have A Dream'
    : '我有一个梦想'

	*注意* ：此函数只将连续字母看做"单词"，所以可能结果不能如愿：

    #+BEGIN_SRC python :session
      "they'are bill's friends from the UK".title()
    #+END_SRC

    #+RESULTS[753ae2da13d282b4be40c7994280c574508a5b86]:
    : "They'Are Bill'S Friends From The Uk"

	可使用正则勉强解决：

    #+BEGIN_SRC python :session
      import re

      def titlecase(s):
          return re.sub(r"[A-Za-z]+('[A-Za-z]+)?",
                        lambda mo: mo.group(0)[0].upper() + mo.group(0)[1:].lower(),
                        s)

      titlecase("they're bill's friends from UK")
    #+END_SRC

    #+RESULTS[43e1ab81788234d1ee6c74f232252744b80b458d]:
    :
    : >>> ... ... ... ... >>> "They're Bill's Friends From Uk"

*** str. *translate* (table)
	将字符串中的字符逐个与参数table中的元素对应，如果相同，则转换，返
	回转换后的结果。可使用静态方法str.maketrans(in, out)创建字典：

	[[http://www.runoob.com/python/att-string-translate.html][@runoob]]：

    #+BEGIN_SRC python :session
      str = 'a a'
      intab = 'aeiou'
      outtab = '12345'
      tabtab = str.maketrans(intab, outtab)
      print(tabtab)
      'this is a string example...wow!!!'.translate(tabtab)
    #+END_SRC

    #+RESULTS[30a74361585819b3a712fbad0367d850c2f1723f]:
    :
    : >>> >>> >>> {97: 49, 111: 52, 117: 53, 101: 50, 105: 51}
    : 'th3s 3s 1 str3ng 2x1mpl2...w4w!!!'

	table参数须为通过__getitem__()方法实现索引的对象，即mapping或
	sequence对象。当字典key值为整数时，可翻译为：单个字符、Unicode值；
	如果为None则删除原来字符。

    #+BEGIN_SRC python :session
      s = 'a a'
      s.translate({97: 'A'})
      s.translate({'a': 'A'})
      s.translate({97: 'ABC'})
      s.translate({97: None})
      s.translate({97: 1234})
    #+END_SRC

    #+RESULTS[a3422bd0f199a8a6f2d5c42f92efeb5fc77d9f7f]:
    :
    : 'A A'
    : 'a a'
    : 'ABC ABC'
    : ' '
    : 'Ӓ Ӓ'

*** str. *upper* ()
	返回字符串副本，将有大小写区别的字符转换为大写。

	*注意* ：如果str中只含无大小写区分字符，str.upper().isupper()可能
	返回False：

    #+BEGIN_SRC python :session
      '测试'.isupper()
      'abc测试'.upper().isupper()
      '测试'.upper().isupper()
    #+END_SRC

    #+RESULTS[22cba8cf8d5aaa810d1aa66a8fc466f989b73b80]:
    : False
    : True
    : False

*** str. *zfill* (width)
	返回字符串副本，使用ASCII'0'填充扩张到width长度后的左边的空白。如果有正
	负号，则先添加。如果width小于或等于len(s)则返回字符串本身：

    #+BEGIN_SRC python :session
      '42'.zfill(5)
      '-42'.zfill(5)
      'claudio'.zfill(10)
    #+END_SRC

    #+RESULTS[fdb203cebd9fb9bde71be632a5bc43a4d1fc46bb]:
    : '00042'
    : '-0042'
    : '000claudio'

** printf风格的格式化输出
   *注意* ：最好使用str.format()接口格式化字符串。

* 二进制Sequence类型-bytes、bytearray、memoryview
  bytes和bytearray是Python核心内置处理二进制数据的类。由memoryview类支
  持，此类使用"缓存协议（buffer protocol）"，不用复制就可获得其他对象
  的内存地址。？
  
  array模块支持高效率存储基本数据类型，如32位整数和IEEE754双精度浮点
  数。
  
** 写在前面
*** 用处举例 [[http://blog.csdn.net/hanhuili/article/details/9069507][@李寒辉的技术日记]]
	比如对字符串进行加密处理，通常是逐个处理字符串中的单个字节。如果
	只含ASCII字符，直接遍历就可；单如果有非ASCII字符，这些字符可能占
	多个字节，就不能通过遍历每个字符来实现遍历每个字节。
*** 进一步说明 [[https://segmentfault.com/a/1190000004450876][@xu_zhoufeng]]
	Bytes类似字符串，不过是由单个字节（8位，取值范围为0-255）作为基本
	元素的Sequence类型，也为Immutable。
    
	Bytes对象的形式为b'xxxx'，其中x为单个字节。单个字节的表示方式为
	\xHH，其中\x为16进制转义符，HH为16进制数（取值范围为10进制的
	0-255）。对于同一字符串，使用不同编码形式生成的Bytes对象，就会有
	不同的值：
    
    符串s分别使用utf-8和gb2312编码转换为了Bytes对象a和c。由于
	编码不同，长度也不同：
    
    #+BEGIN_SRC python :session
       s = 'a1一'
       a = bytes(s, 'utf-8')
       b = bytearray(s, 'utf-8')
       c = bytes(s, 'gb2312')
       print(a, b, c)
       print(len(a), len(b), len(c))
    #+END_SRC
    
    #+RESULTS[848498726a295116d76664340e1ed999657f16dc]:
    :
    : >>> >>> >>> b'a1\xe4\xb8\x80' bytearray(b'a1\xe4\xb8\x80') b'a1\xd2\xbb'
    : 5 5 4
    
	使用Bytes对象的decode方法就可实现解码，如果编码参数与编码时相同，
	就会与原来相同的字符，否则就可能返回UnicodeDecodeError错误：
    
    #+BEGIN_SRC python :session
      bytes('a1一', 'utf-8').decode('utf-8')
      bytes('a1一', 'gb2312').decode('gb2312')

      bytes('a1一', 'gb2312').decode('utf-8')
      bytes('a1一', 'utf-8').decode('gb2312')
    #+END_SRC
    
    #+RESULTS[9753a73ca632282e558aa0120784aff49e2df5e0]:
    : 'a1一'
    : 'a1一'
    : >>> 'a1һ'
    : Traceback (most recent call last): 
    :   File "<stdin>", line 1, in <module>
    : UnicodeDecodeError: 'gb2312' codec can't decode byte 0x80 in position 4: incomplete multibyte sequence
    
	可通过字面量形式创建Bytes对象，不过仅限于ASCII范围内的字符：
    
    #+BEGIN_SRC python :session
      a = b'1abc'
      a = b'1a一'
    #+END_SRC
    
    #+RESULTS[1f2b8f954aac91264f856f9dde063d0afbb1273c]:
    :
    : File "<stdin>", line 1
    : SyntaxError: bytes can only contain ASCII literal characters.
    
** Bytes对象
   bytes对象是由单个bytes元素组成的immutable类型的Sequence。由于主要
   的二进制协议都基于ASCII文本编码，bytes对象中有几个方法只在处理
   ASCII兼容数据时有效，且与字符串的一些方法用法相似。

   bytes对象字面量与字符串字面量唯一区别是在前面有b字母：

	- 单引号：b'still allows embedded "double" quotes'
	- 双引号：b"still allows embedded 'single' quotes"
	- 三引号：'''3 single quotes'''，b"""3 double quotes"""

	不管源代码编码声明如何，字面量中只允许存在ASCII字符，任何Unicode值
	大于127的字符都需转义表示。

	同字符串字面量相同，可在添加前缀r，指定不处理转义序列？：

    #+BEGIN_SRC python :session
      s = r'a\nb'
      print(s)

      s = 'a\nb'
      print(s)
    #+END_SRC

    #+RESULTS[d946bf1d3966287b06650151aadb692a02453eec]:
    :
    : a\nb
    : >>> >>> a
    : b

    #+BEGIN_SRC python :session
      b = br'a\nb'
      print(b)

      b = b'a\nb'
      print(b)
    #+END_SRC

    #+RESULTS[ce0d74ddc6eb34f89a941c2e7297926c3c7a3f09]:
    :
    : b'a\\nb'
    : >>> >>> b'a\nb'

	尽管bytes字面量的表示基于ASCII文本，但bytes对象实际上更像immutable
	类型的整数序列，其中元素的取值范围为0<=x<256。

	除字面量外，还可使用一下方法创建bytes对象：

	- 指定长度，所有元素用0初始化：bytes(0)。
	- 转换至只含整数的iterable：bytes(rang(20))。
	- 通过buffer协议复制二进制数据：bytes(obj)。
	- 参考bytes函数

	由于2位的16进制数就可表示一个字节，所以常使用16进制数表示二进制数。
	因此，bytes对象可使用fromhex类方法将字符串转换为bytes对象。

	classmethod bytes. *fromhex* (string)：解码字符串，忽视空格，返回
	bytes对象：

    #+BEGIN_SRC python :session
      bytes.fromhex('')
      bytes.fromhex('ff 2ef0 F1   F1')
      chr(2 * 16 + 14)                # 16进制2e代表的字符
    #+END_SRC

    #+RESULTS[f0a6caace8150a90d746b011cbf87001a3293549]:
    : b''
    : b'\xff.\xf0\xf1\xf1'
    : '.'

	bytes. *hex* ()：将bytes对象转换为16进制形式的字符串：

    #+BEGIN_SRC python :session
      b'\x2e\xff'.hex()
    #+END_SRC

    #+RESULTS[b887eb86a961598c396ed5555de416ada934079d]:
    : '2eff'

	与字符串对象不同的是，如果b为bytes对象，b[0]会返回整数，b[0:1]会返
	回长度为1的bytes对象。

    #+BEGIN_SRC python :session
      b'abc1'[0]
      b'abc1'[0:1]
    #+END_SRC

    #+RESULTS[e456ea1a3e4a4b020f60f330f1ed5028529be3a0]:
    : 97
    : b'a'

	b'...'形式表示比bytes([46, 46, 46])更有用，不过还是可使用list函数
	将bytes对象转换为整数链表。

    #+BEGIN_SRC python :session
      list(b'abc')
    #+END_SRC

    #+RESULTS[18d791e2473a4717b786bc3ec7c9ab399fbd556d]:
    : [97, 98, 99]

** Bytearray对象
   bytearray对象相当于immutable形式的bytes对象。不过没有相应的字面量
   表示方法，只可用构造器函数构造：

	- 创建空实例：bytearray()
	- 指定长度，使用0填充每个元素：bytearray(10)
	- 使用只含整型iterable类型：bytearray(range(20))
	- 通过buffer协议复制二进制数据：bytearray(b'Hi!')

	bytearray支持所有前面中所有mutable类型Sequence支持的操作，以
	及后面将介绍的bytes和bytearray常见的操作。

	与bytes一样，bytearray也有类方法fromhex()和方法hex()：

    #+BEGIN_SRC python :session
      bytearray.fromhex('FF2E F0 F1F1')
      bytearray(b'abc').hex()
    #+END_SRC

    #+RESULTS[f25622bd6cc957b56ae34802575eb18049982278]:
    : bytearray(b'\xff.\xf0\xf1\xf1')
    : '616263'

	同样也可使用list函数转换为整数链表：

    #+BEGIN_SRC python :session
      list(bytearray(b'abc'))
    #+END_SRC

    #+RESULTS[17a60f9a3af17d02d885f04e2644ef32bf104a98]:
    : [97, 98, 99]

** Bytes和bytearray操作符

   bytes和bytearray对象都具备上面提到的Sequence通用的操作符。此外，二
   者使用上面的通用操作符号时，可混合使用，还可同“类bytes对
   象”（bytes-like object，bytes、bytearray和许多常见的memoryview对象）
   一起使用，返回结果由出现顺序而定（为先出现类型）：

   #+BEGIN_SRC python :session
     b = b'abc'
     ba = bytearray(b'123')

     b + ba
     ba + a
   #+END_SRC

   #+RESULTS[8c1fb8db2985fe0e751c7c9bfb11c2025f1c9f24]:
   :
   : >>> >>> b'abc123'
   : bytearray(b'1231abc')

   但bytes和bytearray的方法不接受字符串作为参数，反之亦然：

   #+BEGIN_SRC python :session
     s = 'abc'
     b = b'abc'

     s.replace('a', 'A')
     b.replace(b'a', b'A')

     b.replace(b'a', 'A')
   #+END_SRC

   #+RESULTS[ffe67e7436899e0ccfed8472285792bdb49df2bf]:
   :
   : >>> >>> 'Abc'
   : b'Abc'
   : >>> Traceback (most recent call last):
   :   File "<stdin>", line 1, in <module>
   : TypeError: a bytes-like object is required, not 'str'

*** bytes. *count* (sub[,start[,end]])
*** bytearray. *count* (sub[,start[,end]])

    返回SUB的出现次数，可通过START和END参数指定截断。

    SUB可为所有“类bytes对象”，以及0-255的整数。

    #+BEGIN_SRC python :session
      b = bytes('a1a一a', 'utf-8')

      b.count(b'a')
      b.count(b'a', 1)
      b.count(b'a', 1, 3)
      b.count(97)
      b.count(bytearray(b'a'))
    #+END_SRC

    #+RESULTS[0c38d602277518715a68da77ce9edd4d1e05b338]:
    :
    : >>> 3
    : 2
    : 1
    : 3
    : 3

*** bytes. *decode* (encoding='utf-8',errors='strict')
*** bytearray. *decode* (encoding='utf-8',errors='strict')

    返回解码结果，默认编码为“utf-8”，默认错误处理方式为"strict"。

    #+BEGIN_SRC python :session
      b = bytes('我是claudio', 'utf-8')
      b
      b.decode('utf-8')
      b.decode('gb2312', 'ignore')
      b.decode('gb2312', 'replace')
      b.decode('gb2312', 'strict')
    #+END_SRC

    #+RESULTS[5da449004438bd4e775c5a74683cb697176aec86]:
    :
    : b'\xe6\x88\x91\xe6\x98\xafclaudio'
    : '我是claudio'
    : 'claudio'
    : '������claudio'
    : Traceback (most recent call last):
    :   File "<stdin>", line 1, in <module>
    : UnicodeDecodeError: 'gb2312' codec can't decode byte 0xe6 in position 0: illegal multibyte sequence

*** bytes. *endswith* (suffix[,stat[,end]])
*** bytearray. *endswith* (suffix[,stat[,end]])

    是否以SUFFIX结尾，可使用START和END指定搜索截断。
    #+BEGIN_SRC python :session
      b = b'abc'
      b.endswith(b'c')
      b.endswith(b'c', 0, 2)
      b.endswith(bytearray(b'c'))
      b.endswith((b'a', b'c', bytearray(b'1')))
    #+END_SRC

    #+RESULTS[be33bec035e4781038ecf1fbbb02cba3ffe14602]:
    :
    : True
    : False
    : True
    : True

*** bytes. *find* (sub[,start[,end]])
*** bytearray. *find* (sub[,start[,end]])

    返回SUB的索引，如果没有，则返回-1，可使用start和end作为截断。

    SUB参数可为“类bytes对象”，或0-255的整数。

    #+BEGIN_SRC python :session
      b = b'banana'
      b.find(b'a')
      b.find(97)
      b.find(b'a', 2)
      b.find(b'z')
    #+END_SRC

    #+RESULTS[fd1b81f517aec1b80d4ae1024839cff1950bb0f8]:
    :
    : 1
    : 1
    : 3
    : -1

*** bytes. *index* (sub[,start[,end]])
*** bytearray. *index* (sub[,start[,end]])
    参数和返回值同find方法，只是在没有找到的情况下返回错误，而不是-1。

    #+BEGIN_SRC python :session
      b = b'banana'
      b.index(b'a')
      b.index(97)
      b.index(b'a', 2)
      b.index(b'z')
    #+END_SRC

    #+RESULTS[f46b03ac06bdb29074c197ab78d142cde261d91b]:
    :
    : 1
    : 1
    : 3
    : Traceback (most recent call last):
    :   File "<stdin>", line 1, in <module>
    : ValueError: substring not found

*** bytes. *join* (iterable)
*** bytearray. *join* (iterable)

    返回使用byte/bytearray连接ITERABLE中元素的结果，ITERABLE中的元素须
    都为“类bytes对象”。

    #+BEGIN_SRC python :session
      b'a'.join([b'1', b'2'])
      bytearray(b'a').join([b'1', b'2'])
      b'a'.join([b'1', bytearray(b'2')])
    #+END_SRC

    #+RESULTS[ce770386874acea807e03cd827b71dc2977f8c00]:
    : b'1a2'
    : bytearray(b'1a2')
    : b'1a2'

*** static bytes.maketrans(from, to)
*** static bytearray.maketrans(from, to)

    此为静态方法，返回用于bytes.translate()方法的翻译表。FROM和TO须为
    “类bytes对象”。

    #+BEGIN_SRC python :session
      intab = bytes(b'123')
      outtab = bytes('一二三', 'gb2312')
      bytes.maketrans(intab, outtab)
      print(outtab)
    #+END_SRC

    #+RESULTS[a6facac108c4b92bfe9857a9fa77349181dea38f]:
    :
    : >>> Traceback (most recent call last):
    :   File "<stdin>", line 1, in <module>
    : ValueError: maketrans arguments must have same length
    : b'\xd2\xbb\xb6\xfe\xc8\xfd'

*** bytes. *partition* (sep)
*** bytearray. *partition* (sep)
    在出现SEP分割，生成3元素元组，第一个元素为SEP前的内容，第二个元素
    为SEP，第三个元素为SEP后的内容。如果不含SEP，则第一个元素为原
    bytes/bytearray的副本，后两个元素为空bytes/bytearray。

    SEP须为“类bytes对象”。

    #+BEGIN_SRC python :session
      b = b'banana'
      b.partition(b'n')
      b.partition(b'Z')
      b.partition('n')
    #+END_SRC

    #+RESULTS[f66c939f804e036b68c4b452ef96b9ac075f6419]:
    :
    : (b'ba', b'n', b'ana')
    : (b'banana', b'', b'')
    : Traceback (most recent call last):
    :   File "<stdin>", line 1, in <module>
    : TypeError: a bytes-like object is required, not 'str'

*** bytes. *replace* (old, new, [count])
*** bytearray. *replace* (old, new, [count])
    返回bytes/bytearray的副本，其中出现OLD的地方用NEW替换。默认替换所
    有，如果有COUNT参数，在从左到右替换COUNT个。

    OLD和NEW需为“类bytes对象”。

    #+BEGIN_SRC python :session
      b = b'banana'
      ba = b'banana'

      b.replace(b'a', b'A')
      b.replace(b'a', b'A', 2)
    #+END_SRC

    #+RESULTS[631503ec53cc6ddcd1ae2e2287c509b568bdc372]:
    :
    : >>> >>> b'bAnAnA'
    : b'bAnAna'

    *注意* ：如果用于bytearray，则不是操作其副本，而是返回一个新的对象。

*** bytes. *rfind* (subp[,start[,end]])
*** bytearray. *rfind* (subp[,start[,end]])
    同find方法，只是从右边计算。

    #+BEGIN_SRC python :session
      b'banana'.rfind(b'a')
    #+END_SRC

    #+RESULTS[ab1d9b092390515e042f96800fbffd3b12acae48]:
    : 5

*** bytes. *rindex* (sub[,start[,end]])
*** bytearray. *rindex* (sub[,start[,end]])
    同index方法，只是从右边开始计算：

    #+BEGIN_SRC python :session
      b'banana'.rindex(b'a')
    #+END_SRC

    #+RESULTS[8981fe48ac5ebbf00c56e92434a754d28b93554f]:
    : 5

*** bytes. *rpartition* (sep)
*** bytearray. *rpartition* (sep)
    同partition方法，只是从最右边出现SEP处分割。且如果无SEP出现，也是将
    元bytes/bytearray作为最后一个元素。

    #+BEGIN_SRC python :session
      b'banana'.rpartition(b'n')
      b'banana'.rpartition(b'z')
    #+END_SRC

    #+RESULTS[64620ca198eebd551388a74cdef95aec1f9cca73]:
    : (b'bana', b'n', b'a')
    : (b'', b'', b'banana')

*** bytes. *startswith* (prefix,[start[,end]])
*** bytearray. *startswith* (prefix,[start[,end]])
    是否一PREFIX开始，可指定截断START和END。PREFIX可为包含多个前缀的元
    组，只要一个满足条件就返回True。

    PREFIX或其中的元素须为“类bytes对象”。

    #+BEGIN_SRC python :session
      b'banana'.startswith(b'ba')
      b'banana'.startswith((b'ba', b'baz'))
    #+END_SRC

    #+RESULTS[eb8cc1fa898041d657807a4eeecc86375054bb5a]:
    : True
    : True

*** bytes. *translate* (table[,delete])
*** bytearray. *translate* (table[,delete])
    返回bytes/bytearray的副本。根据TABLE替换内容，如果有DELETE参数，则
    删除其中的内容。

    可使用bytes.maketrans()方法生成TABLE。DELETE需为“类bytes对象”。

    #+BEGIN_SRC python :session
      b'i have a dream!'.translate(bytes.maketrans(b'aeiou', b'AEIOU'))
    #+END_SRC

    #+RESULTS[147409ce4bdc449e383c36dd4ab4e01d6f938891]:
    : b'I hAvE A drEAm!'

    如果TABLE为None，则是仅删除元素：

    #+BEGIN_SRC python :session
      b'i have a dream!'.translate(None, b'aeiou')
    #+END_SRC

    #+RESULTS[8b9ab85c12c61eded385c6461e3c55e2d34ac6e7]:
    : b' hv  drm!'

*** bytes. *center* (width[,fillbyte])
*** bytearray. *center* (width[,fillbyte])

    *bytes返回副本，bytearray返回新对象。下同。*

    如果WIDTH小于或等于原来长度，bytes会返回原来对象。

    将原对象扩展到WIDTH宽度，默认使用空白字符填充，可使用FILLBYTE指定
    填充字符。

    #+BEGIN_SRC python :session
      b'banana'.center(10)
      b'banana'.center(10, b'|')
      b'banana'.center(0)
    #+END_SRC

    #+RESULTS[bae3733368575798d333e733f8252d73e02ffc41]:
    : b'  banana  '
    : b'||banana||'
    : b'banana'

*** bytes. *ljust* (width[,fillbyte])
*** bytearray. *ljust* (width[,fillbyte])
    按WIDTH左对齐，填充字符FILLBYTE为空格（ASCII Space）。

    如果WITH小于或等于原来宽度，返回bytes本身。

    #+BEGIN_SRC python :session
      b'banana'.ljust(10)
      b'banana'.ljust(10, b'|')
      b'banana'.ljust(1)
    #+END_SRC

    #+RESULTS[c200c11d607fcc058d5dc751551914d2c9edc6c6]:
    : b'banana    '
    : b'banana||||'
    : b'banana'

*** bytes. *lstrip* ([chars])
*** bytearray. *lstrip* ([chars])
    CHARS不是前缀，而是byte的结合。如果为None或缺省，默认删除空格
    （ASCII Space）。

    CHARS须为“类bytes对象”。

    #+BEGIN_SRC python :session
      b'   banana   '.lstrip()
      b'www.google.com'.lstrip(b'.wcom')
    #+END_SRC

    #+RESULTS[5e9957d13da552d9e6351c4b81cbcb892654d374]:
    : b'banana   '
    : b'google.com'

*** bytes. *rjust* (width[,fillbyte])
*** bytearray. *rjust* (width[,fillbyte])
    同ljust方法，只是右对齐：

    #+BEGIN_SRC python :session
       b'banana'.rjust(10)
       b'banana'.rjust(10, b'|')
       b'banana'.rjust(1)
    #+END_SRC

    #+RESULTS[a15af7d169fedb54b8067eb14f2067da25621e4f]:
    : b'    banana'
    : b'||||banana'
    : b'banana'

*** bytes. *rsplit* (sep=None,maxsplit=-1)
*** bytearray. *rsplit* (sep=None,maxsplit=-1)
    见下面split方法。
*** bytes. *rstrip* ([chars])
*** bytearray. *rstrip* ([chars])
    同lstrpe，只是删除右边的CHARS。

    #+BEGIN_SRC python :session
      b'   banana   '.rstrip()
      b'www.google.com'.rstrip(b'.wcom')
    #+END_SRC

    #+RESULTS[a7f653d1aa116ea26971d32c6643cf95541aab72]:
    : b'   banana'
    : b'www.google'

*** bytes. *split* (sep=None,maxsplit=-1)
*** bytearray. *split* (sep=None,maxsplit=-1)
    同字符串的split方法，只是SEP参数须为“类bytes对象”。
*** bytes. *strip* ([chars])
*** bytearray. *strip* ([chars])
    相当于lstrip和rstrip的结合：

    #+BEGIN_SRC python :session
      b'   banana   '.strip()
      b'www.google.com'.strip(b'.wcom')
    #+END_SRC

    #+RESULTS[e323b44045a00507996b484308651ac380c01adf]:
    : b'banana'
    : b'google'

    下面的bytes和bytearray方法默认使用ASCII兼容的二进制形式，不过也可
    使用任意二进制数据作为参数。

    对于bytearray对象，下面的方法并不是返回副本（in-place操作），而是生成新的对象。

*** bytes. *capitalize* ()
*** bytearray. *capitalize* ()
    第一个byte大写，后面所有bytes小写。非ASCII bytes保持不变。

    #+BEGIN_SRC python :session
      b'i have a dream!'.capitalize()
    #+END_SRC

    #+RESULTS[067de7929dd22c6c491c51c02fb8dc21e8617fff]:
    : b'I have a dream!'

*** bytes. *expandtabs* (tabsize=8)
*** bytearray. *expandtabs* (tabsize=8)
    将b'\t'替换为1个或多个空格

    #+BEGIN_SRC python :session
      b'01\t012\t0123\t01234'.expandtabs()
      b'01\t012\t0123\t01234'.expandtabs(4)
    #+END_SRC

    #+RESULTS[1f9699cff994f739841006814d08f3243d007d7d]:
    : b'01      012     0123    01234'
    : b'01  012 0123    01234'

*** bytes. *isalnum* ()
*** bytearray. *isalnum* ()
    是否为只含ASCII字母和数字，且至少有一个元素：

    ASCII字母：

    #+BEGIN_EXAMPLE
      abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
    #+END_EXAMPLE

    ASCII数字：

    #+BEGIN_EXAMPLE
      0123456789
    #+END_EXAMPLE

    #+BEGIN_SRC python :session
      b'ABCabc1'.isalnum()
      b'ABC abc1'.isalnum()
      b''.isalnum()
    #+END_SRC

    #+RESULTS[03d4840e58522c3ff9c5d618a9c8dd96ecd013e2]:
    : True
    : False
    : False

*** bytes. *isalpha* ()
*** bytearray. *isalpha* ()
    只含ASCII字母，且不为空：

    #+BEGIN_SRC python :session
      b'ABCabc'.isalpha()
      b'ABCabc1'.isalpha()
    #+END_SRC

    #+RESULTS[63e061228b23e4fdf96024183a58b7892ddb6345]:
    : True
    : False

*** bytes. *isdigit* ()
*** bytearray. *isdigit* ()
    只含ASCII数字，且不为空：

    #+BEGIN_SRC python :session
      b'1234'.isdigit()
      b'12.3'.isdigit()
    #+END_SRC

    #+RESULTS[7f2b3ee224a4c398aeaa268cd96b8107b5b630e6]:
    : True
    : False

*** bytes. *islower* ()
*** bytearray. *islower* ()
    至少含一个ASCII字母，且所有字母都为小写：

    #+BEGIN_SRC python :session
      b'hello,world'.islower()
      b''.islower()
      b'.'.islower()
    #+END_SRC

    #+RESULTS[68627e842332f7c742bb5c6d8b4b8064dbb45bc1]:
    : True
    : False
    : False

*** bytes. *isspace* ()
*** bytearray. *isspace* ()
    是否只含b' \t\n\r\x0b\f'（空格、tab、换行符、carriage return、
    vertical tab和form feed）中的字符，且不为空。

*** bytes. *istitle* ()
*** bytearray. *istitle* ()
    为ASCII形式的标题，且不为空。

    #+BEGIN_SRC python :session
      b'Hello World'.istitle()
      b'Hello world'.istitle()
    #+END_SRC

    #+RESULTS[92e0462ad3e3a897497c25b30eecc2563405ac9d]:
    : True
    : False

*** bytes. *isupper* ()
*** bytearray. *isupper* ()
    至少含一个ASCII字符，且所有ASCII字符都为大写：

    #+BEGIN_SRC python :session
      b'HELLO WORLD'.isupper()
      b'Hello World'.isupper()
      b''.isupper()
      b'.'.isupper()
    #+END_SRC

    #+RESULTS[e458e84ca2055831ef7d45b9f7edd805e53a30d2]:
    : True
    : False
    : False
    : False

*** bytes. *lower* ()
*** bytearray. *lower* ()
    将所有ASCII字母转换为小写：

    #+BEGIN_SRC python :session
      b'Hello World'.lower()
    #+END_SRC

    #+RESULTS[4c6f6c591b99ce338524ccd6a30b80244ce99cf5]:
    : b'hello world'

*** bytes. *splitlines* (keepends=False)
*** bytearray. *splitlines* (keepends=False)
    在换行符处分割，Unix换行符'\n'，Windows换行符'\r\n'和Macintosh换行
    符'\r'都可识别：

    #+BEGIN_SRC python :session
      b'ab c\n\nde fg\rkl\r\nmn'.splitlines()
    #+END_SRC

    #+RESULTS[7e0f5845314c3277d769ecd0e71369821e467715]:
    : [b'ab c', b'', b'de fg', b'kl', b'mn']

    如果要保留换行符，可指定KEEPENDS参数为True：

    #+BEGIN_SRC python :session
      b'ab c\n\nde fg\rkl\r\nmn'.splitlines(keepends=True)
    #+END_SRC

    #+RESULTS[702b6db16629067811004483252cf49ff98e4c80]:
    : [b'ab c\n', b'\n', b'de fg\r', b'kl\r\n', b'mn']

    与split方法不同，对于空字符串此方法返回空链表：

    #+BEGIN_SRC python :session
      b''.split(b'\n'), b'Two lines\n'.split(b'\n')
      b''.splitlines(), b'One line\n'.splitlines()
    #+END_SRC

    #+RESULTS[2bf40baae7050e181ee5681642a516314ae440eb]:
    : ([b''], [b'Two lines', b''])
    : ([], [b'One line'])

*** bytes. *swapcase* ()
*** bytearray. *swapcase* ()
    交换大小写：

    #+BEGIN_SRC python :session
      b'Hello World'.swapcase()
    #+END_SRC

    #+RESULTS[1a6dd25caeb08f03c9a65704892ebce94a9e31c7]:
    : b'hELLO wORLD'

    *注意* ：不同于str.swapcase()：

    #+BEGIN_SRC python :session
      bin.swapcase().swapcase() == bin
    #+END_SRC

*** bytes. *title* ()
*** bytearray. *title* ()
    将所有“单词”中第一个字母转换为大写，其余转换为小写，非ASCII字母保
    持不变。

    #+BEGIN_SRC python :session
      b'hello world'.title()
    #+END_SRC

    #+RESULTS[bdafb952ad15cceb90d15bc96703872af5b1f15c]:
    : b'Hello World'

    此方法的算法仅是将连续字母作为单词，不能通用，如：

    #+BEGIN_SRC python :session
      b"they're bill's firends from the UK".title()
    #+END_SRC

    #+RESULTS[1e881816ebb27eedcac3e49c467698de5fa2d6b5]:
    : b"They'Re Bill'S Firends From The Uk"

    可使用正则大致修复：

    #+BEGIN_SRC python :session
      import re

      def titlecase(s):
          return re.sub(rb"[A-Za-z]+('[A-Za-z]+)?",
                        lambda mo: mo.group(0)[0:1].upper() +
                        mo.group(0)[1:].lower(),
                        s)

      titlecase(b"they'are bill's friends from UK.")
    #+END_SRC

    #+RESULTS[853b00c6a51a260ebf749297803170f9d503bb8b]:
    :
    : >>> >>> ... ... ... ... ... >>> >>> b"They'are Bill's Friends From Uk."

*** bytes. *upper* ()
*** bytearray. *upper* ()
    将所有ASCII字母转换为大写：

    #+BEGIN_SRC python :session
      b'Hello, World'.upper()
    #+END_SRC

    #+RESULTS[ea1adac72e687af6f2bf119cf97fdcd0c240d0b3]:
    : b'HELLO, WORLD'

*** bytes. *zfill* (width)
*** bytearray. *zfill* (width)
    扩展到WIDTH宽度，左边使用b'0'填充。

    如果WIDTH小于或等于原来宽度，bytes返回自己本身，bytearray仍然返回
    新对象。

    #+BEGIN_SRC python :session
      b'42'.zfill(6)
      b'-42'.zfill(6)
    #+END_SRC

    #+RESULTS[b172afe84921d69bd78fad3e8fdc26e6c7d9f52b]:
    : b'000042'
    : b'-00042'

** 使用printf风格格式化Bytes

   #+BEGIN_SRC python :session
     print(b'%(language)s hash %(number)03d quete types.' %
           {b'language': b'Python', b'number': 2})
   #+END_SRC

   #+RESULTS[9b24f198baa6c3efba515245c84adadba9533b83]:
   :
   : b'Python hash 002 quete types.'
   : <class 'NoneType'>

** Memory Views
   memoryview对象的作用是：不复制就可获取支持buffer protocol对象的内存
   地址。

*** 写在前面 [[https://segmentfault.com/q/1010000007137721][@segmentfault]] （还是没懂）

    str和bytearray切片时会复制数据，生成新的数据；bytes和memoryview切
    片时不会：

    不使用memoryview：

    #+BEGIN_SRC python :session
      a = 'abcdefg'
      b = a[:2]                       # 会生成新的字符串

      a = bytearray('abcdefg', 'utf-8')  # 会生成新的bytearray
      b = a[:2]
      b[:2] = b'bb'                   # 对b的改动不影响b
      a
      b
    #+END_SRC

    #+RESULTS[c1c892b196daf3801846c0ca2fd6da47f3e7131b]:
    :
    : >>> >>> >>> >>> >>> bytearray(b'abcdefg')
    : bytearray(b'bb')

    使用memoryview：

    #+BEGIN_SRC python :session
      a = b'abcdefg'
      ma = memoryview(a)
      ma.readonly                     # 只读
      mb = ma[:2]                     # 不会生成新的bytes

      a = bytearray(b'abcdefg')
      ma = memoryview(a)
      ma.readonly                     # 不为只读
      mb = ma[:2]
      mb[:2] = b'AA'                  # 对mb的改动会影响ma
      ma.tobytes()
      mb.tobytes()
    #+END_SRC

    #+RESULTS[ca75b35e9866dc79fe404515b992d4ef4e83b03f]:
    :
    : >>> True
    : >>> >>> >>> >>> >>> False
    : >>> >>> b'AAcdefg'
    : b'AA'

    使用struct进行unpack解析时可直接接受memoryview对象，避免解析大字符
    串时大量切片：（没懂！！！）

    #+BEGIN_SRC python :session
      import struct

      mv = memoryview(bytes(20))
      type, len = struct.unpack('!BI', mv[:5])
      type, len
    #+END_SRC

    #+RESULTS[9ccffb54d4a9a9f2c3c17d7bf809f6ee90606531]:
    :
    : >>> >>> >>> (0, 0)

*** class *memoryview* (obj)
    创建指向OBJ的memoryview对象。OBJ须支持buffer protocol，包含bytes和
    bytearray对象，及array.array对象。

*** *__eq__* (exproter)
*** *tobytes* ()
*** *hex* ()
*** *tolist* ()
*** *release* ()
*** *cast* (fromat[,shape])
*** *obj*
*** *nbytes*
*** *readonly*
*** *format*
*** *itemsize*
*** *ndim*
*** *shape*
*** *strides*
*** *suboffets*
*** *c_contiguous*
*** *f_contiguous*
*** *contiguous*
* Set类型-set、frozenset
** class *set* ([iterable])：
** class *frozenset* ([iterable])：
** *len(s)* ：
** *x in s* ：
** *x not in s* ：
** *isdisjont* (other)：
** *issubset* (other)：
** *set <= other* ：
** *set < other* ：
** *issuperset* (other)：
** *set >= other* ：
** *set > other* ：
** *union* (*thers)：
** *set | other | ...* ：
** *intersection* (*others)：
** *set & other & ...* ：
** *difference* (*others)：
** *set - other - ...* ：
** *symmetric_difference* (other)：
** *set ^ other* ：
** *copy* ()：
** *update* (*others)：
** *set |= other | ...* ：
** *intersection_update* (*others)：
** *set &= other & ...* ：
** *difference_update* (*others)：
** *set -= other | ...* ：
** *symmetric_difference_update* (other)：
** *set ^= other* ：
** *add* (elem)：
** *remove* (elem)：
** *discard* (elem)：
** *pop* ()：
** *clear* ()：
* Mapping类型-dict
** class *dict* (**kwarg)
** class *dict* (mapping,**kwarg)
** class *dict* (iterable,**kwarg)
** *len(d)*
** *d[key]*
** *d[key] = value*
** *del d[key]*
** *key in d*
** *key not in d*
** *iter(d)*
** *clear* ()
** *copy* ()
** classmethod *fromkeys* (seq[,value])
** *get* (key[,default])
** *items* ()
** *keys* ()
** *pop* (key[,default])
** *popitem* ()
** *setdefault* [key[,default]]
** *update* ([other])
** *values* ()
** Dictionary View 对象
*** *len(dictview)*
*** *iter(dictview)*
*** *x in dictview*
* Context Manager 类型
** contextmanager. *__enter__* ()：
** contextmanager. *__exit__* (exc_type,exc_val,exc_tb)：
* 其他内置类型
** 模块（Modules）
** 类和类实例（Class and Class Instance）
** 函数（Functions）
** 方法（Methods）
** 代码对象（Code Objects）
** 类型对象（Type Objects）
** Null 对象（The Null Object）
** Ellipsis对象（The Ellipsis Object）
** 未实现对象（The Nonimplemented Objects）
** 布尔值（Boolean Values）
** 内部对象（Internal Objects）
* 特殊属性（Special Attribute）
** object. *__dict__*
** instace. *__class__*
** class. *__bases__*
** definition. *__name__*
** definition. *__qualname__*
** class. *__mro__*
** class. *mro* ()
** class. *__subclass__* ()
