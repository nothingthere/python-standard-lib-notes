#+TITLE: 常见问题

* 类bytes对象（bytes-like object）包含哪些？

  - bytes
  - bytearray
  - array.array
  - memoryview

* Buffer Protocol

  支持buffer protocol的对象：

  1. 含内置对象：bytes和bytearray类型。
  2. 以及一些扩展对象：如array.array
  3. 以及第三方库定义的类型，如一些用于图像处理和数字分析的类型。？？？
  4. memoryview。？？？

* 可哈希对象（hashable object）
  一个对象如果有哈希值（即需有__hash__()方法），该值在生命周期内不会改
  变，则为可哈希对象。可用于与其他对象比较（需__eq__()方法）。如果两个
  可哈希对象相等，则需两者哈希值相等。

  可哈希对象主要是用作字典的key值，和set对象的元素。

  Python中所有内置immutable对象都为可哈希对象，而所有mutable容器（如链
  表和字典）都不为可哈希对象。

  所有用户自定义类的实例都默认为可哈希对象，除与自身外都不相等，其哈希
  值可由id()函数获取。
* 浅层复制（shallow copy）和深层复制（deep copy） [[https://en.wikipedia.org/wiki/Object_copying#Shallow_copy][@wiki]]
** 浅层复制
   如复制A对象到B，复制A对象的每个field。如果field为primitive类型，则复制
   其值；如果为对象，则是复制其指针，即A和B共享此对象，B上面修改此对象，
   A上面也会被修改。

   在没有primitive类型的语言中（如JavaScript，一切皆对象），所有复制都
   是复制对象指针。

   可见，浅层复制效率更高。
** 深层复制
   不管是primitive类型，还是对象，都创建新的对象。B上面的对象与A上面的
   对象相互独立。

   可见，深层复制效率更低。
* 映射（Mapping）
  映射（Mapping）类型为支持任意键值对查询的对象容器，具备Mapping或
  MutableMapping abstract base类的方法。支持此功能的类型有：

  - dict
  - collections.defaultdict
  - collections.OrderDict
  - collections.Counter
* 装饰器（decorator）
  返回另外一个函数的函数。装饰器的常用场景为classmethod()和
  staticmethod()。

  装饰器仅仅是语法糖，下面两个例子在语义上完全相等：

  #+BEGIN_SRC python :session
    def f(...):
        ...

    f = staticmethod(f)

    @staticmethod
    def f(...):
        ...
  #+END_SRC

  类中的方法定义同样可以使用装饰器，不过相对少用。
* 生成器（generator）
  返回“生成器迭代器”的函数。与普通函数看起来相同，使用含yield表达式，
  用来生成一系列值。这些值可用在for循环语句或使用next()函数中，每次返
  回一个其生成值。

  通常称为“生成器函数”，也可称为“生成器迭代器”。

* 生成器迭代器（generator iterator）
  由生成器创建的对象。

  每一个yield语句会暂停函数进程，记住当前代码执行的位置(含局部变量和未
  解决的try语句)。当yield语句执行完后，再次回到原来位置。？？？

**** 字节序（endian）[[https://zh.wikipedia.org/wiki/%25E5%25AD%2597%25E8%258A%2582%25E5%25BA%258F][@wiki]]

     数据在内存中排序情况。如数字“12”，如果为“小端序（little-endian）”
     则内存中“2”在“1”之前，“大端序（bit-endian）”则“1”在“2”之前。

     在网络应用中，字节序为必须考虑的因素，因为不同类型机器可能采用不
     同 标准的字节序。
* Gestalt匹配 [[http://www.drdobbs.com/database/pattern-matching-the-gestalt-approach/184407970?pgno%3D5][参考地址]] [[http://collaboration.cmc.ec.gc.ca/science/rpn/biblio/ddj/Website/articles/DDJ/1988/8807/8807c/8807c.htm][打开更快的网页]]

  [[http://blog.csdn.net/sunboyiris/article/details/18264311][Gestalt视觉理论]]

  [[https://zh.wikipedia.org/wiki/%25E6%25A0%25BC%25E5%25BC%258F%25E5%25A1%2594%25E5%25AD%25A6%25E6%25B4%25BE][@zh.wikipedia]] ：

  #+BEGIN_QUOTE
  格式塔学派主张人脑的运作原理是整体的，“整體不同於其部件的總和”。例如，
  我們對一朵花的感知，並非純粹單單從對花的形狀、顏色、大小等感官資訊而
  來，還包括我們對花過去的經驗和印象，加起來才是我們對一朵花的感知
  #+END_QUOTE

  何为Gestalt匹配？Gestalt是用于描述人们认知局部特性模型时，并不是根据
  所有特性总和特性作为判断依据。比如“连线拼图游戏”，可能还没连完，或刚
  开始就能认出最终图形。将已知填充图形的过程就称之为Gestalt。

  Ratcliff/Obershelp匹配算法就是利用这一特点计算一维模型的相似度。由于
  文本字符串为一维，此算法可求得两个字符串的相似率，或百分百。

  由于此算法可即快又轻松子字符串是否匹配，可用在很多场景。如编译器识别
  变量、关键字或函数名时，即时有拼写错误也可识别；教育软件中识别答案时，
  即时有拼写错误也可识别；shell命令中有部分参数或选项拼写错误，也能智
  能识别，执行预想命令，或提供正确选项供修改；文本冒险游戏时此算法的最
  佳应用场景：根据用户输入生成大量假设。

  Ratcliff/Obershelp匹配算法由John W. Ratcliff和John A Obershelp于1983
  年提出，用于教育软件。通常，教育软件喜欢用多选题的主要原因为：如果转
  变为填空题，需要逐个字符比较判断答案是否正确。而此算法可判断是否是拼
  写错误，还是错误答案。如今，此算法已被应用在商业拼写检查软件、数据库
  搜索程序和编译器中。

  比如将此算法应用到C编译器中。当碰到拼写错误的函数、关键字和变量名时，
  可根据所有已经定义的identifiers进行匹配，如果与某个identifier匹配率
  超过60%，则可做出正确的猜测，否则正常抛出错误。这样，编译器即可正常
  处理，也可显示做出的假设及所在行。同时，还可让程序员选择假设是否正确，
  甚至自动修改源码。

** 算法原理

   抽象点说，Ratcliff/Obershelp匹配算法可认为是：匹配通配符
   （wild-cards）时不需要通配符。此算法会根据最近的匹配，创建自己的通
   配符。具体讲，先找到2个字符串中最多匹配的字符，然后使用此组字符作为
   两个字符串的“锚”，然后再从此“锚”的两边再分组，放入“堆（stack）”中继
   续比较。此过程会在“堆”中的所有子字符串总一直进行，直到耗尽。最后用
   两个字符串中相同字符数乘以2，再除以两个字符串的总字符数，返回整数值，
   作为匹配率。

   比如，假设比较字符串“Pennsylvania”和“Pencilvaneya”。最长的相同子字
   符串为“lvan”，他们左边的子字符串分别为“Pennsy”和“Penci”，右边的子字
   符串分别为“ia”和“eya”，此时的得分为8（“lvan”的长度乘以2）。右边子字
   符串只有“a”为相同子字符串，此时得分增加到10，剩下“i”和“ey”，完全无
   相同子字符串，结束右边比较；右边相同子字符有“Pen”，的得分为6，总得
   分增加到16，剩下右边子字符串分别为“nsy”和“ci”，无相同子字符串，到此
   结束。最后得到匹配比率为 16 / 24 = 67%。

** 实现

   [[file:files/gestalt.c][gestalt.c]] 为C语言实现，原文使用了汇编实现其中的simil函数。

   此程序需高效，其中最耗时的部分为比较子字符串中最相同字符个数的过程。
   最坏的情况为两个子字符串根本没有相同字符，此时需比较的次数为N X M次，
   其中N和M分别为两个字符串中字符长度。所以原文使用了汇编实现simil函数。

   [[https://github.com/wernsey/miscsrc/blob/master/simil.c][simil函数C实现参考]]

   比较过程包含两个循环：内层循环字符串1，外层循环字符串2。但发现有字
   符相等时，检查目前位置相同字符数量是否大于已发现的最大相同字符数量。
   如果是，更新最大相同字符数量，更新相同的子字符串。当更新完最大相同
   字符数量后，可将搜索缩减到"strlen(str1)-max_chars"的长度。原因为假
   设已经有5个字符相等，如何字符串还剩余5个字符，则不可能大于5个字符串
   相同。

   获取到最大相同字符数后，然后再在其左右分别求相同字符数，如此递归至
   子字符串中没有字符为止。

** 性能问题

   To evaluate the performance of the routines, the following tests were
   performed. First, a series of strings were created from 1 to 20
   characters in length. Then 10,000 calls were made to the
   pattern-matching procedure for each of these 20 strings on an 8 MHz
   IBM AT. The time for each iteration was recorded in hundredths of
   seconds. Strings were created that were exactly equal, totally
   different, matching halfway at the beginning, matching halfway at the
   end, or matching hallway in the middle. The results of these tests are
   reported in Figure 1, page 50, as the number of comparisons performed
   per second. As you can see in the figure for exactly equal strings,
   the procedure found virtually no change as the strings became
   longer. For this case, the pattern-matching procedure acted as an
   ordinary string comparison function and performed approximately 8,000
   comparisons per second. Totally different strings act as predicted,
   showing a quadratic curve in the form of N2 (from 8,000
   comparisons/second for one character to 200 comparisons/second for two
   20-character strings).

   Strings that match at the beginning can exit quickly and those that
   match in the middle divide their search problem in half. (455
   comparisons/second for 20-character strings.) Strings that match at
   the end model those that are totally unalike since nearly the entire
   strings are searched before the matching substring is located. (270
   comparisons/second.)

   Next, two 12-character strings were analyzed for every percentage that
   the procedure could return. At each percentage, a wide variety of
   combinations of substring matches were tried. These varieties included
   matches at the beginning, in the middle, and at the end, and those
   spread differently throughout the two strings. Figure 2, page 51,
   displays the average time for these tests at each percentage.

   Figure 1: Effects of timing during different compare types

** 后记

   Implementing this algorithm in your application can dramatically
   improve your software, but it does require some judgment based on the
   environment. The first step in interpreting the ambiguous data should
   be by compiling a list of the most likely alternatives. Your program's
   action after this should be based on both how strong and how closely
   grouped the candidates are. For example, if the best match found is
   only a 50-percent match but all the other candidates are under
   20-percent, the 50-percent match is quite likely the users' original
   intent. However, if there are six 90-percent matches or better, it
   would be best to provide the user with these matches in order of
   similarity, along with a convenient and rapid method of confirmation,
   such as a pop-up menu.

   We hope this article has sparked some interest in the programming
   community, and we'd appreciate hearing about your applications of the
   algorithm. Adding pattern recognition to software has tremendous
   potential for improving all our lived programmers and users alike. We
   might finally make "user-friendly" something more than a marketing
   cliche.

   Figure 2: Average timing for every percentage of a 12- to 12-character
   string match

* 如何将Python图形界面打包成exe可执行文件

  #+BEGIN_EXAMPLE sh
    pip install pyinstaller

    pyinstaller -wF ***.py
  #+END_EXAMPLE

  -w参数：exe程序不带命令行调试窗口。

  -F参数：打包为当个可执行程序，不依赖**dll文件。

** 可能遇到的问题

   1. 目前pyinstaller支持道python3.5。
   2. 执行时跑出错误：

      #+BEGIN_QUOTE
      Pyinstaller won't run. "ImportError: DLL load failed"
      #+END_QUOTE

      可参考：https://github.com/pyinstaller/pyinstaller/issues/1840

      到：
      https://www.microsoft.com/zh-cn/download/confirmation.aspx?id=5555

      上下载安装需要组件。

* 安装虚拟机

  1. 安装virtualbox virtualbox-guest*
  2. 镜像下载：itellyou.cn

     测试Win7（64/32）企业版可用。

  3. 安装镜像

     - 最好一开始多分配一些内存，方便Windows更新。

     - 安装后先选择“Device”，安装“Guest×××”，不然windows软件更新时会失
       败。

     - 安装python，依赖Service Pack 1，所以需先进行上一步。

     - 安装pyinstaller，如果报错"DLL load failed"，则需安装Microsoft
       Visual C++ 2010 Redistributable，下载地址：

       https://www.microsoft.com/zh-cn/download/confirmation.aspx?id=5555
